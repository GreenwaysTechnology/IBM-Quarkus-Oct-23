		Microservice communications and Falut Tolerance
....................................................................................

One of the challenges brought by the distributed nature of microservies is that communication with external systems are inherently unreliable.

This increases demand of resilience of applications.

In order to build more resilent application,Quarkus provides SmallRye Falut Toleerance which is the implement of "Microprofile Fault Tolerance".

There are two context with respect to Resilence.

What if the application throwing error incase of unreliable conditions?
 We need to convert errors into meaningfull responses.

MicroProfile Resilence Annotations:
1.@Timeout -  fail if the invocation takes too long.
2.@Fallback - Provides alternative result in case of a failure.
3.@Retry - retry serval times in case of a failure.
4.@CircuitBreaker - Prevent invocations if previous invocations failed too often
5.@BulkHead -Limit concurrent invocations.

Create Quarkus Project.
 -smallrey-falut-tolerance
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-fault-tolerance</artifactId>
    </dependency>

Timeout
   Timeout prevents from the execution from waiting forever. It is recommended that a microservice invocation should have timeout associated with.

Caller ---------calling ----------Callee

The caller expects response within some predefined time, if callee not possible to return results on time... then callee will throw an exception called "Timeout Exception"

For eg , the caller expects response from the callee, with 1000ms , if callee takes beyond that, then Exception is thrown.

package com.ibm.falut.timeout;

import jakarta.enterprise.context.ApplicationScoped;

import java.util.List;

@ApplicationScoped
public class TimeoutService {

    public List<String> getProducts() throws InterruptedException {
        //similate delay
        Thread.sleep(5000);
        return List.of("product1","Product2");
    }
}


package com.ibm.falut.timeout;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.faulttolerance.Timeout;

import java.util.List;

@Path("timeout")
public class TimeoutResource {

    @Inject
    TimeoutService timeoutService;

    @GET
    @Timeout(1000)
    public List<String> getProducts() throws InterruptedException {
        return timeoutService.getProducts();
    }
}

After running this code, you will get the exception like below.

Error id ccb8b37e-61ca-4b97-b43c-ad6ae83a5913-1, org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException: com.ibm.falut.timeout.TimeoutResource#getProducts timed out

Here callee is throwing exception to caller,caller now propagating the exception to callee
This is not recommended, now we need to handle this in proper way.

@Fallback:
 Converts error message into meaningfull response.

package com.ibm.falut.timeout;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.faulttolerance.Fallback;
import org.eclipse.microprofile.faulttolerance.Timeout;

import java.util.List;

@Path("timeout")
public class TimeoutResource {

    @Inject
    TimeoutService timeoutService;

    @GET
    @Timeout(1000)
    @Fallback(fallbackMethod = "getProductFromCache")
    public List<String> getProducts() throws InterruptedException {
        return timeoutService.getProducts();
    }

    //Handle the timeoutException with fallback
    public List<String> getProductFromCache() {
        return List.of("fallback product");
    }

}
.....................................................................................
				Retry
....................................................................................

Types of failures and how to handle them?

1.Fail fast
2.Fail safe


1.Fail fast

 Client----invoke api----throws error----Handle error instantly

2.Fail safe
					       |--1
					       |--2 Recovering chances
 Client----invokes api--->Throws error--->Retry|--3
                                               |--4 Not Recovered throw Error-->Use 							fallback



package com.ibm.falut.retry;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.faulttolerance.Fallback;
import org.eclipse.microprofile.faulttolerance.Retry;

import java.util.List;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;

@Path("retry")
public class RetryResouces {

    @Inject
    RetryService retryService;
    private AtomicLong counter = new AtomicLong();
    private float faileRatio = 0.5f;

    @GET
    @Retry(maxRetries = 3, retryOn = RuntimeException.class)
    @Fallback(fallbackMethod = "fallbackProducts")
    public List<String> getProducts() throws InterruptedException {
        final Long invoicationNumber = counter.getAndIncrement();
        maybeFail(String.format("Retry Resouce#getProducts invocation %d failed", invoicationNumber));
        return retryService.getProducts();
    }

    public List<String> fallbackProducts() {
        return List.of("Fallback products");
    }

    private void maybeFail(String failureMessage) {
        if (new Random().nextFloat() < faileRatio) {
            System.out.println(failureMessage);
            throw new RuntimeException("Resouce Failed");
        }

    }

}
Testing
http://localhost:8080/retry
You can keep on refreshing the page, once the no of failures are deducted it will throw error,when ever error is occured, it will fallback to fallback methods
..................................................................................
			  Circut Breaker
...................................................................................
A Circuit breaker is usefull for limiting number of failures happening in the system.
When part of the system becomes temporarily unstable.The circuit breaker records successful and failed invocations of a method.
When the ration of failed invocations reaches the specified threshold,the cb opens and blocks all further invocations of that method for a given time.

package com.ibm.falut.cb;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.faulttolerance.CircuitBreaker;
import org.eclipse.microprofile.faulttolerance.Fallback;

import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

@Path("cb")
public class CircuitBreakerResource {

    @Inject
    CircuitBreakerService circuitBreakerService;
    private AtomicLong counter = new AtomicLong();

    @GET
    @CircuitBreaker(requestVolumeThreshold = 4)
    @Fallback(fallbackMethod = "fallback")
    public List<String> getProducts() {
        maybeFail();
        return circuitBreakerService.getProducts();
    }

    public List<String> fallback() {
        return List.of("Fallback response");
    }

    private void maybeFail() {
        final Long invocationNumber = counter.getAndIncrement();
        if (invocationNumber % 4 > 1) {
            System.out.println(invocationNumber);
            throw new RuntimeException("Service got Failed");
        }
    }

}










