				Quarkus-Reactive-Data Source
.....................................................................................
Quarkus ORM implementation via JPA With Hibernate and Panache.

Microservices design pattern called "Data Base Per service Pattern".According to this Pattern Quarkus implements Data sources.

application.properties

quarkus.datasource."ServiceName".dbProperties=value

eg:

without service names
quarkus.datasource.db-kind=h2
quarkus.datasource.username=username-default
quarkus.datasource.jdbc.url=jdbc:h2:mem:default
quarkus.datasource.jdbc.max-size=13

With Service Names

quarkus.datasource.users.db-kind=h2
quarkus.datasource.users.username=username1
quarkus.datasource.users.jdbc.url=jdbc:h2:mem:users
quarkus.datasource.users.jdbc.max-size=11

quarkus.datasource.inventory.db-kind=h2
quarkus.datasource.inventory.username=username2
quarkus.datasource.inventory.jdbc.url=jdbc:h2:mem:inventory
quarkus.datasource.inventory.jdbc.max-size=12

quarkus.datasource.customers.db-kind=postgresql 
quarkus.datasource.customers.username=<your username>
quarkus.datasource.customers.password=<your password>
quarkus.datasource.customers.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test
quarkus.datasource.customers.jdbc.max-size=16

DbKind: Type of database
common db-kind value conventions
1.DB2: db2
2.Derby: derby
3.H2: h2
3.MariaDB: mariadb
4.Microsoft SQL Server: mssql
5.MySQL: mysql
6.Oracle: oracle
7.PostgreSQL: postgresql, pgsql or pg

Data Source:
...........
Agroal data source is default datasource...
  It is modern,lightweight connection pool implementation designed for high performance.
  It is similar to Apache DBCP libs.

Data sources are powered with reactive programming
   Datasources are powered with non blocking arch....

Transactions:
   Quarkus data module offeres transaction implementations.
   Quarkus implments Narayana as transaction manager

What is Narayana?
	Narayana is a transactions toolkit which provides support for applications developed using a broad range of standards-based transaction protocols:

JTA
JTS
Web-Service Transactions
REST Transactions
STM

Reactive Data sources:
  quarkus-reactive-db2-client
  quarkus-reactive-pg-client
 etc...

Coding Pattern:
   Quarkus uses hibernate as low level engine for persistence and built upon JPA   Standards
   Quarkus uses Panache framework built on top of Hibernate.

			Panache
			  |
			 JPA
			  |
			Hibernate

.....................................................................................
			JPA With Hibernate and Panche
.....................................................................................
There is two style of writing code

1.Non Reactive
2.Reactive

We are going to use Panche Framework to connect data sources.

There are two design patterns
1.Active Record Pattern
2.Repository Pattern /DAO Pattern

Steps:

1.You need database 
   db2
   Derby(in-process)
   H2(in-process)
   Mariadb
   mysql
   postgresql
   oracle
You can start database via docker.


Quarkus apps  has mode

1.dev mode
  start db server  
     standalone
     via docker
2.prod mode
   via containers
   via vms

Quarkus offers features- dev services- for databases
...................................................

If your quaurkus apps runs in dev/test mode, quarkus provides you with a zero config database outof the box,
 a feature we refer to as "Dev Services"

If you enable dev service for any database, quarkus runs database as part of app within embeded docker container.
 db2,mariadb,mssql,mysql,oracle,postgresql-dev services enabled database

application.properties
quarkus.devservices.enabled=true/false
quarkus.datasource.devservices.enabled=true/false

Database connection information:
..................................

Default user name and password for dev services.

postgre,mariadb,mysql,db2,h2 - quarkus,quarkus (userName,password)

Database dependency:

1.Quarkus orm
  ->quarkus-hibernate-orm
  ->quarkus-agroal
  ->quarkus-jdbc-postgresql

JPA as Spec :
 Uses all jpa annotations @Entity,@Table,@Id,@Column....

...................................................................................

Database : 
 ->Postgresql.


Database : 
 ->Postgresql.


POM :
quarkus ext add resteasy-reactive-jackson
quarkus ext add reactive-pg-client
quarkus ext add hibernate-reactive-panache


application.properties
#Dev Services : Todo: this configuration will not be applicable for production
quarkus.devservices.enabled=false
quarkus.datasource.devservices.enabled=false

#Datasource configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
#quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/db
quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5432/db
#Hibernate configuration
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql


Create sample table and some sample data

resources/import.sql
INSERT INTO CUSTOMER(id,name,city) VALUES (1, 'Subramanian','Coimbatore');
INSERT INTO CUSTOMER(id,name,city) VALUES (2, 'Murugan','Coimbatore');
INSERT INTO CUSTOMER(id,name,city) VALUES (3, 'Geetha','Chennai');
ALTER SEQUENCE customer_seq RESTART WITH 4;
....................................................................................

Hibernate-nonreactive-Active Record pattern:
.............................................

Steps:
1.Create Project with following dependencies

     <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
      </dependency>

	<dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-hibernate-orm-panache</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-jdbc-postgresql</artifactId>
        </dependency>

2.Enable database settings.
 via dev services(embeded) incase of in dev- only for development, in production this setting must be disabled
 via separate containers

Make Sure that docker is running.

application.properties
quarkus.datasource.devservices.enabled=true

Run the project
 
 mvnw compile quarkus:dev or quarkus dev

After running ,you can note in the console, postgresql is running in the embeded container.

>docker ps
CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS                  PORTS                     NAMES
f5bd2e4e46d3   postgres:14   "docker-entrypoint.sâ€¦"   About a minute ago   Up About a minute       0.0.0.0:65228->5432/tcp   quirky_tesla

3.Add some sample SQL Query -  This is optional only.

src/resources/import.sql
INSERT INTO CUSTOMER(id,name,city) VALUES (1, 'Subramanian','Coimbatore');
INSERT INTO CUSTOMER(id,name,city) VALUES (2, 'Murugan','Coimbatore');
INSERT INTO CUSTOMER(id,name,city) VALUES (3, 'Geetha','Chennai');
ALTER SEQUENCE customer_seq RESTART WITH 4;

4.Hibernate coding
There are two Design patterns are proposed to write database coding.

1.Active Record Pattern
2.Repository Design Pattern /DAO Design pattern

Style of Code

1.Using Hibernate with JPA alone - Which is not recommened
2.Using Panache Hibernate with JPA - Which is recommended

Panache is a framework which is built on Hibernate to simplify and enable design patterns easily: Recommended to use Panache.

Active Record Pattern with Panache
..................................
Steps:

1.Declare Entity

package com.ibm.activerecord.entity;

import jakarta.persistence.Entity;

@Entity
public class Customer {
}

2.Write Entity with Panche Active Record

package com.ibm.activerecord.entity;

import io.quarkus.hibernate.orm.panache.PanacheEntity;

import jakarta.persistence.Entity;

@Entity
public class Customer extends PanacheEntity {
}


PanacheEntity is super class which offers all "CURD and database apis"

Entity variables which represents columns.
All Variables must be declared "public"
id variables dont need be declared.

package com.ibm.activerecord.entity;

import io.quarkus.hibernate.orm.panache.PanacheEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;

@Entity
public class Customer extends PanacheEntity {
    //Column Names
    @Column(name = "name")
    public String name;
    @Column(name="city")
    public String city;
}

3.1.Write Resources to Get All Data

package com.ibm.activerecord.resource;

import com.ibm.activerecord.entity.Customer;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("customers")
public class CustomerResource {

    //CURD operations
    @GET
    public List<Customer> findAll() {
        return Customer.listAll();
    }
}

3.2.Get Data by id
package com.ibm.activerecord.resource;

import com.ibm.activerecord.entity.Customer;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.WebApplicationException;

import java.util.List;

@Path("customers")
public class CustomerResource {

    //CURD operations
    @GET
    public List<Customer> findAll() {
        return Customer.listAll();
    }

    @GET
    @Path("{id}")
    public Customer findById(@PathParam("id") Integer id) {
        Customer customer = Customer.findById(id);
        if (customer == null) {
            throw new WebApplicationException("Customer with Id of " + id + "does not exits");
        }
        return customer;
    }
}

In order handle error, we need to write Error Mapper class.
package com.ibm.activerecord.resource;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import jakarta.inject.Inject;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.ext.ExceptionMapper;
import jakarta.ws.rs.ext.Provider;

@Provider
public class ErrorMapper implements ExceptionMapper<Exception> {

    @Inject
    ObjectMapper objectMapper;

    @Override
    public Response toResponse(Exception exception) {
        int code = 500;
        if (exception instanceof WebApplicationException) {
            code = ((WebApplicationException) exception).getResponse().getStatus();
        }
        ObjectNode exceptionJson = objectMapper.createObjectNode();
        exceptionJson.put("exceptionType", exception.getClass().getName());
        exceptionJson.put("code", code);
        if (exception.getMessage() != null) {
            exceptionJson.put("error", exception.getMessage());
        }
        return Response.status(code).entity(exceptionJson).build();
    }
}

Testing:
GET localhost:8080/customers/1
{
    "id": 1,
    "name": "Subramanian",
    "city": "Coimbatore"
}
GET localhost:8080/customers/10

{
    "exceptionType": "jakarta.ws.rs.WebApplicationException",
    "code": 500,
    "error": "Customer with Id of 10does not exits"
}

3.3.Post Data to Rest api

package com.ibm.activerecord.resource;

import com.ibm.activerecord.entity.Customer;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("customers")
public class CustomerResource {

     //Post
    @POST
    public Response create(Customer customer) {
        if (customer.id != null) {
            throw new WebApplicationException("Id was invalidly set on Request", 422);
        }
        customer.persist();
        return Response.ok(customer).status(201).build();
    }
}

Testing:
POST localhost:8080/customers

Payload
{
    "name": "John",
    "city": "Mumbai"
}

OutPut:
{
    "exceptionType": "jakarta.persistence.TransactionRequiredException",
    "code": 500,
    "error": "Transaction is not active, consider adding @Transactional to your     method to automatically activate one."
}

In order to perform create,update,delete operations, transactions must be enabled.

By using @Transactional annotation

package com.ibm.activerecord.resource;

import com.ibm.activerecord.entity.Customer;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("customers")
public class CustomerResource {

    //CURD operations
    @GET
    public List<Customer> findAll() {
        return Customer.listAll();
    }

    @GET
    @Path("{id}")
    public Customer findById(@PathParam("id") Integer id) {
        Customer customer = Customer.findById(id);
        if (customer == null) {
            throw new WebApplicationException("Customer with Id of " + id + "does not exits");
        }
        return customer;
    }

    //Post
    @POST
    @Transactional
    public Response create(Customer customer) {
        if (customer.id != null) {
            throw new WebApplicationException("Id was invalidly set on Request", 422);
        }
        customer.persist();
        return Response.ok(customer).status(201).build();
    }
}


Testing:
POST localhost:8080/customers

Payload
{
    "name": "John",
    "city": "Mumbai"
}

Response:
status code 201
{
    "id": 4,
    "name": "John",
    "city": "Mumbai"
}

3.4 How to Update

package com.ibm.activerecord.resource;

import com.ibm.activerecord.entity.Customer;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("customers")
public class CustomerResource {

    //CURD operations
    @GET
    public List<Customer> findAll() {
        return Customer.listAll();
    }

    @GET
    @Path("{id}")
    public Customer findById(@PathParam("id") Integer id) {
        Customer customer = Customer.findById(id);
        if (customer == null) {
            throw new WebApplicationException("Customer with Id of " + id + "does not exits");
        }
        return customer;
    }

    //Post
    @POST
    @Transactional
    public Response create(Customer customer) {
        if (customer.id != null) {
            throw new WebApplicationException("Id was invalidly set on Request", 422);
        }
        customer.persist();
        return Response.ok(customer).status(201).build();
    }
    //Update

    @PUT
    @Path("{id}")
    @Transactional
    public Customer update(@PathParam("id") Long id, Customer customer) {
        if (customer.name == null) {
            throw new WebApplicationException("Customer Name was not set on request " + 422);
        }
        Customer customerEntity = Customer.findById(id);
        if (customerEntity == null) {
            throw new WebApplicationException("Customer with ID Of " + id + "does not  exits", 404);
        }
        //update logic
        customerEntity.name = customer.name;
        customerEntity.city = customer.city;
        return customerEntity;
    }
}

Testing:
PUT localhost:8080/customers/5

Payload:
{
    "name": "James",
    "city": "Delhi"
}
Response:
{
    "id": 5,
    "name": "James",
    "city": "Delhi"
}

3.5.How to delete record
package com.ibm.activerecord.resource;

import com.ibm.activerecord.entity.Customer;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("customers")
public class CustomerResource {

    //CURD operations
    @GET
    public List<Customer> findAll() {
        return Customer.listAll();
    }

    @GET
    @Path("{id}")
    public Customer findById(@PathParam("id") Integer id) {
        Customer customer = Customer.findById(id);
        if (customer == null) {
            throw new WebApplicationException("Customer with Id of " + id + "does not exits");
        }
        return customer;
    }

    //Post
    @POST
    @Transactional
    public Response create(Customer customer) {
        if (customer.id != null) {
            throw new WebApplicationException("Id was invalidly set on Request", 422);
        }
        customer.persist();
        return Response.ok(customer).status(201).build();
    }
    //Update

    @PUT
    @Path("{id}")
    @Transactional
    public Customer update(@PathParam("id") Long id, Customer customer) {
        if (customer.name == null) {
            throw new WebApplicationException("Customer Name was not set on request " + 422);
        }
        Customer customerEntity = Customer.findById(id);
        if (customerEntity == null) {
            throw new WebApplicationException("Customer with ID Of " + id + "does not  exits", 404);
        }
        //update logic
        customerEntity.name = customer.name;
        customerEntity.city = customer.city;
        return customerEntity;
    }
    //delete record
    @DELETE
    @Transactional
    @Path("{id}")
    public Response delete(@PathParam("id") Long id){
        Customer customer = Customer.findById(id);
        if(customer==null){
            throw new WebApplicationException("Customer with ID Of " + id + "does not  exits", 404);
        }
        customer.delete();
        return Response.status(204).build();
    }
}
...................................................................................
			Repository Pattern-Blocking/NonReactive way
....................................................................................

Step 1: Declare Entity:
......................
package com.ibm.repository;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;

@Entity
public class Employee {
    @Id
    @GeneratedValue
    public Long id;
    @Column(name = "name")
    public String name;
    @Column(name = "city")
    public String city;

    public Employee() {
        
    }

    public Employee(String name, String city) {
        this.name = name;
        this.city = city;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}

Here we dont need to inherit any class 


2.Declare Repository class.
package com.ibm.repository;

import io.quarkus.hibernate.orm.panache.PanacheRepository;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class EmployeeRepository implements PanacheRepository<Employee> {
    
}

3.Resources 
package com.ibm.repository;

import jakarta.enterprise.inject.Produces;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("employees")
public class EmployeeRepositoryResource {
    //CURD operations
    @Inject
    EmployeeRepository employeeRepository;

    @GET
    public List<Employee> findAll() {
        return employeeRepository.listAll();
    }

    @GET
    @Path("{id}")
    public Employee findById(@PathParam("id") Long id) {
        Employee employee = employeeRepository.findById(id);
        if (employee == null) {
            throw new WebApplicationException("Employee with ID Of " + id + "does not  exits", 404);
        }
        return employee;
    }

    //post
    @POST
    @Transactional
    public Response create(Employee employee) {
        if (employee.id != null) {
            throw new WebApplicationException("ID was invalidly set on request", 404);
        }
        employeeRepository.persist(employee);
        return Response.ok(employee).status(201).build();
    }

    //update
    @PUT
    @Path("{id}")
    @Transactional
    public Employee update(@PathParam("id") Long id, Employee employee) {
        if (employee.name == null || employee.city == null) {
            throw new WebApplicationException("Employee Name or city was not set on request" + 422);
        }
        Employee employeeEnity = employeeRepository.findById(id);
        if (employeeEnity == null) {
            throw new WebApplicationException("Employee with ID Of " + id + "does not  exits", 404);
        }
        employeeEnity.name = employee.name;
        employeeEnity.city = employee.city;
        return employeeEnity;
    }

    @Path("{id}")
    @Transactional
    @DELETE
    public Response delete(@PathParam("id") Long id) {
        Employee employeeEnity = employeeRepository.findById(id);
        if (employeeEnity == null) {
            throw new WebApplicationException("Employee with ID Of " + id + "does not  exits", 404);
        }
        employeeRepository.delete(employeeEnity);
        return Response.ok().status(204).build();
    }

}

Note:
 For both concepts, you can write database operations inside service class,later service class can be injected into rest service.
....................................................................................
		  Non Blocking /Reactive Hibernate orm Panche
...................................................................................

Steps: 
1.create Project with following depedency
<dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-hibernate-reactive-panache</artifactId>
    </dependency>
  <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>
  
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-reactive-pg-client</artifactId>
    </dependency>

2.resources/import.sql
INSERT INTO CUSTOMER(id,name,city) VALUES (1, 'Subramanian','Coimbatore');
INSERT INTO CUSTOMER(id,name,city) VALUES (2, 'Murugan','Coimbatore');
INSERT INTO CUSTOMER(id,name,city) VALUES (3, 'Geetha','Chennai');
ALTER SEQUENCE customer_seq RESTART WITH 4;

3.Dev Service activation for Postgresql.
application.properties
quarkus.datasource.devservices.enabled=true

quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql

4.Start the application and test every thing is fine
 mvnw compile quarkus:dev
....................................................................................
			 Active Record Pattern
.....................................................................................
Steps:

1.Declare Entity and Inherit PancheEntity Base class

package com.ibm.reactive.data.activerecord;

import io.quarkus.hibernate.reactive.panache.PanacheEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;

@Entity
public class Customer extends PanacheEntity {
    @Column(name = "name")
    public String name;
    @Column(name = "city")
    public String city;

}

2.1.GET ALL Customers in reactive way
package com.ibm.reactive.data.activerecord;

import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("customers")
public class CustomerResource {

    //List of Customers
    @GET
    public Uni<List<Customer>> findAll() {
        return Customer.listAll();
    }
}

package com.ibm.reactive.data.activerecord;

import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("customers")
public class CustomerResource {

    //List of Customers
    @GET
    public Uni<List<Customer>> findAll() {
        return Customer.listAll();
    }

    //GET BY id
    //without error handling
//    @GET
//    @Path("{id}")
//    public Uni<Customer> getCustomerById(@PathParam("id") Long id) {
//        return Customer.findById(id);
//    }
    //with error Handling
    @GET
    @Path("{id}")
    public Uni<Response> getCustomerById(@PathParam("id") Long id) {
        return Customer.findById(id).onItem().transform(entity -> {
            if (entity == null) {
                throw new WebApplicationException("Customer with ID Of " + id + "does not  exits", 404);
            }
            return Response.ok(entity).build();
        });
    }
}
