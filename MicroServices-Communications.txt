				 Microservices-Service Communcation
.....................................................................................

Services are represented by apis

API are represented in many ways

1.RPI
  REST API
  RPC - GRPC implmentation
  GraphQL API

2.Message Based
  -MOM
    redis,RabbitMQl,IBM MQ
    Vertx Event Bus
  2.Event driven Arch
    Kafka

Service Communication:

REST TO REST: HTTP based Service communication.

Quarkus Implementations:
1.MicroProfile Rest client - Both Reactive and NonReactive
2.Vertx WebClient -By Default Reactive
3.Java 11 HTTPClient -Blocking and Non Blocking way...

Create Project With
resteasy-reactive
rest-client-reactive
rest-client-reactive-jackson
rest-reactive-jackson

In Service communications there are two actors:
1.Caller
  Who is calling the other service
2.Callee
   Who is called by the other services


Flow:
 User/App ----->http---Caller------->Callee


Step 1:

Write callee service:
/////////////////////

package com.ibm.rest.client;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {
    public String hello() {
        return "Hello Service";
    }
}

Write Callee Resource class
package com.ibm.rest.client;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public String hello(){
        return  helloService.hello();
    }
}

Step 2:
REST client Interface: To facilitate, Rest communications between two services.

package com.ibm.rest.client;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

@Path("/hello")
@RegisterRestClient
public interface HelloRestClientService {
    //CURD OPERATIONS of call
    @GET
    String sayHello();
}

1.Here we need to declare interface
2.Annotate the interface with @RegisterRestClient
3.@Path("hello") indicates the call route url.
4.Http Method and apis are mapping inside interface...


Step 3: Configuration in application.properties
com.ibm.rest.client.HelloRestClientService/mp-rest/url=http://localhost:8080
com.ibm.rest.client.HelloRestClientService/mp-rest/scope=javax.inject.Singleton

Step 4: writing Caller service: Inject RestClient Interface into Caller service
package org.acme;

import com.ibm.rest.client.HelloRestClientService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RestClient;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return helloRestClientService.sayHello();
    }
}

How to test:

http://localhost:8080/greet
....................................................................................
			  Refactored Configurations
....................................................................................
application.properties
com.ibm.rest.client.HelloRestClientService/mp-rest/url=http://localhost:8080
com.ibm.rest.client.HelloRestClientService/mp-rest/scope=javax.inject.Singleton

Here we have mentioned full package name with interface name, this can be simplified


package com.ibm.rest.client;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

@Path("/hello")
//@RegisterRestClient
@RegisterRestClient(configKey = "hello-api")
public interface HelloRestClientService {
    //CURD OPERATIONS of call
    @GET
    String sayHello();
}


#com.ibm.rest.client.HelloRestClientService/mp-rest/url=http://localhost:8080
#com.ibm.rest.client.HelloRestClientService/mp-rest/scope=javax.inject.Singleton

hello-api/mp-rest/url=http://localhost:8080
hello-api/mp-rest/scope=javax.inject.Singleton

....................................................................................
			 Reactive Implementation.


Callee:

package com.ibm.rest.client;

import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {
    public Uni<String> hello() {
        return Uni.createFrom().item("Hello Service!!!!");
    }
}

package com.ibm.rest.client;

import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public Uni<String> hello(){
        return  helloService.hello();
    }
}

Interface:
package com.ibm.rest.client;

import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

@Path("/hello")
//@RegisterRestClient
@RegisterRestClient(configKey = "hello-api")
public interface HelloRestClientService {
    //CURD OPERATIONS of call
    @GET
    Uni<String> sayHello();
}

Caller
package org.acme;

import com.ibm.rest.client.HelloRestClientService;
import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RestClient;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        return helloRestClientService.sayHello();
    }
}
.....................................................................................
		        Vertx WebClient -By Default Reactive
.....................................................................................

    <dependency>
      <groupId>io.smallrye.reactive</groupId>
      <artifactId>smallrye-mutiny-vertx-web-client</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-vertx</artifactId>
    </dependency>

Callee : The same programm we are going to use.
package com.ibm.rest.client;

import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public Uni<String> hello(){
        return  helloService.hello();
    }
}
package com.ibm.rest.client;

import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {
    public Uni<String> hello() {
        return Uni.createFrom().item("Hello Service!!!!");
    }
}


Caller;
package org.acme;

import com.ibm.rest.client.HelloRestClientService;
import io.smallrye.mutiny.Uni;
import io.vertx.ext.web.client.WebClientOptions;
import io.vertx.mutiny.core.Vertx;
import io.vertx.mutiny.ext.web.client.HttpResponse;
import io.vertx.mutiny.ext.web.client.WebClient;
import jakarta.annotation.PostConstruct;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RestClient;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @Inject
    Vertx vertx;

    WebClient webClient;

    @PostConstruct
    public void init() {
//        create instance of WebClient
        webClient = WebClient.create(vertx, new WebClientOptions().setDefaultHost("localhost").setDefaultPort(8080));
    }

    //REST Client call
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        return helloRestClientService.sayHello();
    }

    //vertx client options
    @Path("/vertxclient")
    @GET
    public Uni<String> sayHello() {
        return webClient.get("/hello").send().onItem().transform(HttpResponse::bodyAsString);
    }

}
.....................................................................................
			  Message Oriented Communications
...................................................................................
			Service Communication via Messages
		(Event Driven Microservices using Vertx Event Bus)
		


how to build loosly coupled microservices?


AKKA - Actor Model Based.

Actor model is architure model which describes how data can be exchanged among programs we call services using "message oriented and event driven".

Vertx inspired akka with respect to message passing techniques, now we can pass messages using vertx  "Event Bus".

Event Bus:
 -Event bus is object through which we can exchange messages async.
 -Event bus is just like message broker which in memory message broker
 -Event bus uses queue to store messages
 -Event bus communicates via tcp protocal
 -Event bus can exchange any type of data- including json.
 -Event can be used to send and receive messages across the system.

Quarkus can Use EventBus for message oriented communication.


How consumer and publisher are connectected?

 Via address :Messages are sent on the event bus to an address.
address should be unique, can follow dns naming model

 ibm.order
 ibm.order.inventory

Types of message Delivery:

1.point to point -  
  send messages to only one consumer.
 eventbus.send
2.Publisher/Subscriber  - pub sub model
  One publisher many subscribers
  eventbus.publish
3.request/reply
    send messages to only one consumer with ack.


Dependency:
 vertx
     <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-vertx</artifactId>
    </dependency>


Quarkus Event Bus Methods:
1.send ->Point to Point
  A message to specific address - One Single Consumer recevies Message


Caller can be rest api or another service:
...........................................

Service: Callee:
package com.ibm.vertx.event.bus;

import io.quarkus.vertx.ConsumeEvent;
import jakarta.enterprise.context.ApplicationScoped;

package com.ibm.vertx.event.bus;

import io.quarkus.vertx.ConsumeEvent;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class CustomerService {

    //Listener method
    @ConsumeEvent("ibm.customer.service.list")
    public String findAll(String id) {
        return "Customer Service" + id;
    }
}

Caller : Rest api

package com.ibm.vertx.event.bus;

import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.core.eventbus.EventBus;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("customers")
public class CustomerResource {

    @Inject
    EventBus eventBus;

    @GET
    @Path("{id}")
    public Uni<String> getCustomerInfo(@PathParam("id") String id) {
        return eventBus.<String>request("ibm.customer.service.list", id).onItem().transform(Message::body);
    }
}
.................................................................................
				Fire and Foget -Request and Reply pattern
..................................................................................


Callee:
package com.ibm.vertx.event.bus;

import io.quarkus.vertx.ConsumeEvent;
import io.vertx.core.json.JsonObject;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class ProductService {

    @ConsumeEvent("product.service")
    public void process(Message<JsonObject> message) {
        System.out.println(message.body().encodePrettily());
        System.out.println(message.address());
    }
}

Caller:
package com.ibm.vertx.event.bus;


import io.vertx.core.json.JsonObject;
import io.vertx.mutiny.core.eventbus.EventBus;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("products")
public class ProductResource {

    @Inject
    EventBus eventBus;

    @GET
    public String getCustomerInfo() {
        JsonObject product = new JsonObject().put("id", 1).put("name", "Books");
        eventBus.requestAndForget("product.service", product);
        return "Processed";
    }
}
....................................................................................
		  pub and sub pattern - one to Many
....................................................................................

When we publish message on an address, who ever has that address they will get messages.


package com.ibm.vertx.event.bus;

import io.vertx.mutiny.core.eventbus.EventBus;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("notification")
public class NotificationResource {

    @Inject
    EventBus eventBus;

    @GET
    @Path("{message}")
    public String publish(String message) {
        eventBus.publish("stock.notification", message);
        return "published";
    }
}

Callee:
package com.ibm.vertx.event.bus;

import io.quarkus.vertx.ConsumeEvent;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class NotificationService {

    @ConsumeEvent("stock.notification")
    public void consume_one(Message<String> message) {
        System.out.println("Listener 1");
        System.out.println(message.body() + " " + message.address());
    }

    @ConsumeEvent("stock.notification")
    public void consume_two(Message<String> message) {
        System.out.println("Listener 2");
        System.out.println(message.body() + " " + message.address());
    }

    @ConsumeEvent("stock.notification")
    public void consume_three(Message<String> message) {
        System.out.println("Listener 3");
        System.out.println(message.body() + " " + message.address());
    }
}
.....................................................................................
			  Microservices -Event Sourcing Design pattern
....................................................................................

Implmenetations in Quarkus:

1.SmallRye Reactive Messaging
  SmallRye Reactive Messaging is a framework for building event-driven, data streaming, and event-sourcing applications using CDI.

 It lets your application interaction using various messaging technologies such as Apache Kafka, AMQP or MQTT. 
The framework provides a flexible programming model bridging CDI and event-driven.

Core Concepts of Reactive Messaging:
....................................
https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.3/concepts.html

1.Message
   It is wrapper which contains "payload(data) + meta data"
   The App can pusblish message(publisher) and can process message(consumer)

2.Channel
   It is logical pipeline through which Messages are transmitted.

3.Connector
   It is a code which connects brokers which is software which has Messages.

Programming Model:
 Reactive Messaging uses CDI annotations to abstract underlying message brokers

Annotations:

org.eclipse.microprofile.reactive.messaging.Incoming - indicates the consumed channel

org.eclipse.microprofile.reactive.messaging.Outgoing - indicates the populated channel

import org.eclipse.microprofile.reactive.messaging.Message;
import org.eclipse.microprofile.reactive.messaging.Outgoing;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class MessageProcessingBean {

    @Incoming("consumed-channel")
    @Outgoing("populated-channel")
    public Message<String> process(Message<String> in) {
        // Process the payload
        String payload = in.getPayload().toUpperCase();
        // Create a new message from `in` and just update the payload
        return in.withPayload(payload);
    }
}

Sample Code Work Flow:
......................

@Outgoing("source")
public Multi<String> generate() {
    return Multi.createFrom().items("Hello", "from", "reactive", "messaging");
}

@Incoming("source")
@Outgoing("sink")
public String process(String in) {
    return in.toUpperCase();
}

@Incoming("sink")
public void consume(String processed) {
    System.out.println(processed);
}
generate --> [ source ] --> process --> [ sink ] --> consume

only @Outgoing are used to generate messages or payloads - Publisher

only @Incoming are used to consume messages or payloads -Consumer

both @Incoming and @Outgoing are used to process messages or payloads; or transform the stream == Creating Messages.

....................................................................................
		SmallRye Reactive Messaging With Apache Kafka
...................................................................................			
		
Req:
 1.Quarkus App with necessary dependency
 2.Kafka 
    -Dev 
	Quarkus offers Kafka as dev service
      quarkus-smallrye-reactive-messaging-kafka
    -Production

Application Arch:

 There will be two application

 1.Producer App which produces messages and stores into Kafka
 2.Consumer App which receives messages from the Kafka and process them, transfers to    again producer applications.

pom.xml:
 	<dependency>
         <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>
        </dependency>

        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
        </dependency>

Steps:
1.Producer :

 POST /quotes/request
    -publish data into Kafka cluster
 GET /quotes
    -Consumes From the Kafka cluster after processing.


Models:
package org.acme.kafka.model;

public class Quote {

    public String id;
    public int price;

    /**
     * Default constructor required for Jackson serializer
     */
    public Quote() { }

    public Quote(String id, int price) {
        this.id = id;
        this.price = price;
    }

    @Override
    public String toString() {
        return "Quote{" +
                "id='" + id + '\'' +
                ", price=" + price +
                '}';
    }
}

Serialzer: 
package org.acme.kafka.model;

import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;

public class QuoteDeserializer extends ObjectMapperDeserializer<Quote> {
    public QuoteDeserializer() {
        super(Quote.class);
    }
}
QuoteResource:
package org.acme.kafka.producer;

import java.util.UUID;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.acme.kafka.model.Quote;
import org.eclipse.microprofile.reactive.messaging.Channel;
import org.eclipse.microprofile.reactive.messaging.Emitter;

import io.smallrye.mutiny.Multi;

// POST /quotes/request -  send data to the Channel
// GET  /quotes   -  Consume data from the channel
@Path("/quotes")
public class QuotesResource {

    @Channel("quote-requests")
    Emitter<String> quoteRequestEmitter;

    /**
     * Endpoint to generate a new quote request id and send it to "quote-requests" Kafka topic using the emitter.
     */
    @POST
    @Path("/request")
    @Produces(MediaType.TEXT_PLAIN)
    public String createRequest() {
        UUID uuid = UUID.randomUUID();
        quoteRequestEmitter.send(uuid.toString());
        return uuid.toString();
    }

    @Channel("quotes")
    Multi<Quote> quotes;

    /**
     * Endpoint retrieving the "quotes" Kafka topic and sending the items to a server sent event.
     */
    @GET
    @Produces(MediaType.SERVER_SENT_EVENTS) // denotes that server side events (SSE) will be produced
    public Multi<Quote> stream() {
        return quotes.log();
    }
}

.....................................................................................

Quote Processor Application:

Model:
package org.acme.kafka.model;

public class Quote {

    public String id;
    public int price;

    /**
     * Default constructor required for Jackson serializer
     */
    public Quote() { }

    public Quote(String id, int price) {
        this.id = id;
        this.price = price;
    }

    @Override
    public String toString() {
        return "Quote{" +
                "id='" + id + '\'' +
                ", price=" + price +
                '}';
    }
}

Resource
package org.acme.kafka.processor;

import java.util.Random;

import javax.enterprise.context.ApplicationScoped;

import org.acme.kafka.model.Quote;
import org.eclipse.microprofile.reactive.messaging.Incoming;
import org.eclipse.microprofile.reactive.messaging.Outgoing;

import io.smallrye.reactive.messaging.annotations.Blocking;

/**
 * A bean consuming data from the "quote-requests" Kafka topic (mapped to "requests" channel) and giving out a random quote.
 * The result is pushed to the "quotes" Kafka topic.
 */
@ApplicationScoped
public class QuotesProcessor {

    private Random random = new Random();

    @Incoming("requests")
    @Outgoing("quotes")
    @Blocking
    public Quote process(String quoteRequest) throws InterruptedException {
        // simulate some hard working task
        Thread.sleep(2000);
        return new Quote(quoteRequest, random.nextInt(100));
    }
}
.....................................................................................

Testing:
>quarkus-session\kafka-quickstart> mvn -f producer quarkus:dev
>quarkus-session\kafka-quickstart> mvn -f processor quarkus:dev

http://localhost:8080/quotes.html
.....................................................................................
