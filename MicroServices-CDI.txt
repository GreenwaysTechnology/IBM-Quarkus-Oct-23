				Context Dependency Injection
...................................................................................
				  Dependency Injection - IOC
.....................................................................................

What is IOC?
 Inversion of Control is design pattern for creating depandent objects and injecting into another.

How IOC is implemented in Spring?
 Spring Container is the reference implemnetation of IOC design pattern

How IOC is implemented in Quarkus?
  Quarkus uses JEE spec called CDI context Dependency Injection

What is CDI?
  CDI is JEE Spec? -Jakarta Contexts and Dependency Injection

Quarkus and CDI ?
 Quarkus has not implemented 100% CDI spec due to some reasons.

"Quarkus ArC" is a build-time oriented dependency injection based on CDI 2.0.


    			Quarkus Application
				|
	         Quarkus Arc -layer built on the top of CDI
				  |
		  Jakarta Contexts and Dependency Injection




JEE CDI Vs Quarkus CDI:
......................

JEE CDI "resolves" bean dependency during runtime of an application,after deployment, if something goes wrong, errors are reported only during runtime.

Quarkus CDI uses a model called "Build Time"
   During application build process, if there is any dependency missmatch related errors are reported.

Build-time Processing Benefits and Drawbacks:
..............................................

Fail Fast
  Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as AmbiguousResolutionException or UnsatisfiedResolutionException.

Instant Startup
  When the app starts ArC just loads all the metadata and initializes some internal structures. There is no need to analyze the application classes again. This means negligible startup overhead.
 
Minimized Runtime
  In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars. Weld 3.1.1 (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar. In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint.

Optimized Code Paths and Metadata Structures

  When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already. 


Core Features of CDI:

1.Bean: What is Bean?

Bean is java object

Types of Beans:

1.Application Beans(pojos)
   Objects are created by developer 
   Objects life cycle is managed by developer and JVM

2.Container managed Bean
   Objects created by the Container

What is container?
   Container is runtime where quarkus apps are running.
 
  Object life cycle are managed by Runtime 

What are the advantages of Container Managed Bean?

>The developer can focus application logic.

			 CDI implemenation

CDI is implemented via "Annotations"

Apis in cdi:

1.javax.inject
2.javax.enterprise.inject - core di apis
3.javax.enterprise.context - scope and contextuaal apis
4.javax.enterprise.events -  publishing events and listening events-  container wide event driven programming
5.javax.enterprise.util
6.javax.interceptor

Common Annoations:

1.@Inject  
2.@Qualifer
3.LifeCycle of Bean
   @ApplicationScoped
   @SessionScoped
   @RequestScoped
   @SingleTon
 
4.@Observes - event listner
...................................................................................
				Quarkus Application Archiecture
...................................................................................

There are two layers

1.controllers
   Using Rest api
2.services
   Using plain java class called services...


Use case: Write service class and Resource


package com.ibm.service;


public class GreetingService {
    public String hello() {
        return "Hello from RESTEasy Reactive";
    }
}

package org.acme;

import com.ibm.service.GreetingService;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    private GreetingService greetingService = new GreetingService();

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return greetingService.hello();
    }
}

The class "GreetingService" is called Bean class- Application Bean- we have to create instance of this class.

Quarkus recommends to apply "IOC" principle: Dont create object by yourself. ask the container to create and manage- just use created object.

Service class need to annotated using the following any one of the annoations


@ApplicationScoped
@SingleTon
@SessionScoped
@RequestScoped

These annotations marks the class , so that the container creates object automatically and make it available ready for use.


These annotations marks the class , so that the container creates object automatically and make it available ready for use.

package com.ibm.service;


import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {
    public String hello() {
        return "Hello from RESTEasy Reactive";
    }
}

By Looking this class container automatically creates instance and make it ready to use.
package org.acme;

import com.ibm.service.GreetingService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    // private GreetingService greetingService = new GreetingService();
    @Inject
    private GreetingService greetingService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return greetingService.hello();
    }
}
.....................................................................................	     		Types of Injection in Quarkus  -Injection Points

1.Setter Injection
2.Field Injection
3.Constructor injection

Quarkus supports all types of injection but recommened only "Field Injection"


Setter Injection:



package com.ibm.service;

import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class WelcomeService {

    public Uni<String> getMessage() {
        return Uni.createFrom().item("Hello");
    }
}

package org.acme;

import com.ibm.service.WelcomeService;
import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("welcome")
public class WelcomeResource {

    private WelcomeService welcomeService;

    public WelcomeService getWelcomeService() {
        return welcomeService;
    }

    @Inject
    public void setWelcomeService(WelcomeService welcomeService) {
        this.welcomeService = welcomeService;
    }

    @GET
    public Uni<String> sayHello() {
        return welcomeService.getMessage();
    }
}

Constructor Injection:

package org.acme;

import com.ibm.service.WelcomeService;
import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("welcome")
public class WelcomeResource {

    private WelcomeService welcomeService;

    public WelcomeResource() {
    }

    @Inject
    public WelcomeResource(WelcomeService welcomeService) {
        this.welcomeService = welcomeService;
    }

    @GET
    public Uni<String> sayHello() {
        return welcomeService.getMessage();
    }
}
.....................................................................................
Common Things:

1.private keyword is not necessary in any type of DI

...................................................................................
			Injecting multiple Depedencies
....................................................................................


package com.ibm.service;


import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class ProductService {

    public String getProduct(){
        return  "Product";
    }
}

package com.ibm.service;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class CustomerService {

    public String getCustomer() {
        return "Customer";
    }
}
package org.acme;

import com.ibm.service.CustomerService;
import com.ibm.service.ProductService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("store")
public class StoreResource {

    @Inject
    ProductService productService;
    @Inject
    CustomerService customerService;

    @GET
    public String getStore() {
        return productService.getProduct() + customerService.getCustomer();
    }
}
.....................................................................................
			 Interface Based Depedency Injection
....................................................................................
package com.ibm.service.interfaces;

public interface NumberGenerator {
    String generateISBNNumber();
}


package com.ibm.service.interfaces;


import jakarta.enterprise.context.ApplicationScoped;

import java.util.Random;

@ApplicationScoped
public class ISBNGenerator implements NumberGenerator {
    @Override
    public String generateISBNNumber() {
        return "15-343334342" + Math.abs(new Random().nextInt());
    }
}


package org.acme;

import com.ibm.service.interfaces.ISBNGenerator;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("books")
public class BookResource {
    @Inject
    ISBNGenerator isbnGenerator;

    @GET
    public String getISBN() {
        return isbnGenerator.generateISBNNumber();
    }
}
....................................................................................
			 Interface with Multiple Implementations


package com.ibm.service.interfaces;

public interface Greeter {
    String sayGreet();
}
package com.ibm.service.interfaces;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HaiImpl implements Greeter {
    @Override
    public String sayGreet() {
        return "Hai";
    }
}
package com.ibm.service.interfaces;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloImpl implements Greeter {
    @Override
    public String sayGreet() {
        return "Hello";
    }
}
package org.acme;

import com.ibm.service.interfaces.Greeter;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("hellohai")
public class HelloHaiResource {

    @Inject
    Greeter greeter;

    @GET
    public String sayGreet(){
        return greeter.sayGreet();
    }
}

output:
jakarta.enterprise.inject.AmbiguousResolutionException: Ambiguous dependencies for type com.ibm.service.interfaces.Greeter and qualifiers [@Default]
	- java member: org.acme.HelloHaiResource#greeter
	- declared on CLASS bean [types=[org.acme.HelloHaiResource, java.lang.Object], qualifiers=[@Default, @Any], target=org.acme.HelloHaiResource]
	- available beans:
		- CLASS bean [types=[com.ibm.service.interfaces.HelloImpl, com.ibm.service.interfaces.Greeter, java.lang.Object], qualifiers=[@Default, @Any], target=com.ibm.service.interfaces.HelloImpl]
		- CLASS bean [types=[com.ibm.service.interfaces.HaiImpl, com.ibm.service.interfaces.Greeter, java.lang.Object], qualifiers=[@Default, @Any], target=com.ibm.service.interfaces.HaiImpl]

Why this error?
 Because we have two implementations for same interface, Quarkus cant understand which implementation you want..

Quarkus could not resolve which bean implementation to be picked up.

Solution:
 1.Using Qualifiers
 2.Using @Named Annoation

Qualifiers are very complex, we need to write lot of code.

Using @Named Annotation

=>YOu dont need to write custom qualifiers

Eg:
package com.ibm.service.interfaces;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Named;

@ApplicationScoped
@Named("hai")
public class HaiImpl implements Greeter {
    @Override
    public String sayGreet() {
        return "Hai";
    }
}
package com.ibm.service.interfaces;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Named;

@ApplicationScoped
@Named("hello")
public class HelloImpl implements Greeter {
    @Override
    public String sayGreet() {
        return "Hello";
    }
}
package org.acme;

import com.ibm.service.interfaces.Greeter;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("hellohai")
public class HelloHaiResource {

    @Inject
    @Named("hai")
    Greeter greeter;

    @GET
    public String sayGreet() {
        return greeter.sayGreet();
    }
}
.....................................................................................
			 Life Cycle apis
.....................................................................................

Apis are called automatically.

package com.ibm.service;

import io.quarkus.runtime.Shutdown;
import io.quarkus.runtime.Startup;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.context.Initialized;

import java.util.List;

@ApplicationScoped
public class UserService {
    List<String> users;

    @Startup
    public void init() {
        users = List.of("Subramanian", "Admin", "Guest", "Super User");
    }

    @Shutdown
    public void destroy() {
        System.out.println("Shutdown");
    }

    public List<String> getUsers() {
        return users;
    }
}
package org.acme;


import com.ibm.service.UserService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("users")
public class UserResource {

    @Inject
    UserService userService;

    @GET
    public List<String> getUsers() {
        return userService.getUsers();
    }
}






