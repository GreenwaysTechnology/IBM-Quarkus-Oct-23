				Microservices
.....................................................................................
What are microservices?


Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably - a necessity for competing and winning in today’s world.

Let’s look at why its important to deliver software rapidly, frequently, reliably and sustainably.


Before MicroServices: 
 Monolothic ; single development,deployment.....

Microservices are collection of many design patterns.

....................................................................................
			 Micro services implementation
.....................................................................................
Microservices just archtecture, we can implement any language,any framework.

Java implementation:
1.Spring cloud
2.Quarkus
3.Vertx
etc....
.....................................................................................
			Quarkus as Microservice implmentation
.....................................................................................
Quarkus is framework which implements the most of the microservice design patterns
via Microprofile specification.

Micro Profile specification is  extension of "Microservice" design patterns.

Domain Modeling
................

ProductCatelog Management
Inventory Management
OrderManagement
DeliveryManagement

Application Architecture

ProductCataglog
  ->Service

What is service?

Service is nothing offering. Service means which offers something.
Service offers some biz functionality in applications
Service represents a domain like order - Order service,PaymentService

How to implement service?

=>Service is program
=>Service is single or multiple objects
=>Service Object which has apis
=>Service API's Expose some biz functionality
=>Service API may receive and return data to the callers
=>Caller could any other program which means any client apis like browsers,mobile   apps or even other microservices(Services)

Service API Design:
...................

1.WebService
   =>SOAP service =>Not in Use
   =>RestFull Webservice
       =>GraphQL API
2.RPC 
   =>TCP services
   =>Grpc Services
3.MoM
   =>Kafka
   =>RabbitMQ

..................................................................................
..................................................................................
			RestFull WebService Implementation
..................................................................................
         	  Microservice-HTTP Based Microserivce
  	 	  RESTFull Web Service using Jax-RS Spec
		      using RESTEasy Framework
.....................................................................................

RESTEasy:

  RESTEasy is a JBoss / Red Hat project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications. It is an implementation of the Jakarta RESTful Web Services, an Eclipse Foundation specification that provides a Java API for RESTful Web Services over the HTTP protocol.

Moreover, RESTEasy also implements the MicroProfile REST Client specification API

Quarkus team uses RESTEasy framework for building MicroService's REST API Design.

Traditional RESTEasy apps are deployed on "Jboss,Apach Tomcat" like web containers.
.....................................................................................
			  Types of Web services 


1.Reactive web service - Highly Recommended
2.Non Reactive web service - Not recommended


How to identify the reactive and non reactive?

via maven dependencies.

Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>

Non Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy</artifactId>
    </dependency>

Both dependency cant be added in one single project , either reactive or non reactive.

			 REST API development

Quarkus is based on JEE standards and MicroProfile standards

Quarkus rest api based on JAX-RS specification - Jakarta RESTful Web Services.

Quarkus implements RESTEasy Framework which is based on Jakarta WS.

RestEasy is based on Blocking and non blocking arch.

Quarkus by default adds Reactive(nonblocking) dependency.

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>

Getting started with rest api development:

1.create project
quarkus create app code-with-quarkus-rest
Looking for the newly published extensions in registry.quarkus.io
-----------

applying codestarts...
>> java
>> maven
>> quarkus
>> config-properties
>> dockerfiles
>> maven-wrapper
>> resteasy-reactive-codestart

-----------
[SUCCESS]  quarkus project has been successfully generated in:
--> E:\session\IBM\2023\Oct\Quarkus\code-with-quarkus-rest
-----------
Navigate into this directory and get started: quarkus dev


Resources:
  Domain model which exposes api which  are accessed by clients using urls.

CustomerResource,ProductResource,PaymentResource

RESTEasy is annotation driven.

eg:
package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello from RESTEasy Reactive";
    }
}


RESTEasy is annotation driven.

@Path
@GET
@POST
@PUT
@DELETE

package com.ibm.rest.api;


import jakarta.ws.rs.*;

@Path("/customers")
public class CustomerResource {

    //CURD Operations
    @GET
    public String getCustomers() {
        return "Customers";
    }

    @POST
    public String addCustomer() {
        return "Customers add";
    }

    @PUT
    public String updateCustomer() {
        return "Update customers";
    }

    @DELETE
    @Path("/remove")
    public String removeCustomer() {
        return "Remove Customers";
    }
}
...................................................................................
.....................................................................................
			Passing data to the REST API

Data can be passed to the end point

1.through url - path parameter,query parameters,matrix parameters
   data passed
2.Through body(payload)
  
Matrix Parameters: Passing more than one parameter.
....................................................................................

Parameters: - Path Parameter:
..........................
package com.ibm.rest.api.parameters.path;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("users")
public class UserResource {

    @GET
    @Path("/{id}")
    public String getUserById(@PathParam("id") Integer id){
        return  id.toString();
    }
}

Query Parameters:
 Passing Query String ?variable=value&variable=value
package com.ibm.rest.api.parameters.query;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.QueryParam;

//GET /books?pages=10
@Path("books")
public class Books {

    @GET
    public String getPages(@QueryParam("pages") Integer pages) {
        return "Requested Pages are " + pages;
    }
}
.....................................................................................
			Default values for Query Params
....................................................................................
What if i dont supply query parameters, it would be null, if you want default value..

package com.ibm.rest.api.parameters.query;

import jakarta.ws.rs.DefaultValue;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.QueryParam;

//GET /books?pages=10
@Path("books")
public class Books {

    @GET
    public String getPages(@QueryParam("pages") @DefaultValue("1") Integer pages) {
        return "Requested Pages are " + pages;
    }
}
....................................................................................
			 Matrix Parameters

GET /employee/info;project=xx;client=xxx;location=xxx

package com.ibm.rest.api.parameters.matrix;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.MatrixParam;
import jakarta.ws.rs.Path;

//localhost:8080/employees/info;project=ecommerce;client=ebay
@Path("employees")
public class EmployeeResource {

    @GET
    @Path("/info")
    public String getEmployee(@MatrixParam("project") String project, @MatrixParam("client") String client) {
        return project + " " + client;
    }
}
.....................................................................................
			 Context - Object

Context Object provides information about "running container" and the application where we have deployed.

How to access context information?

@Context

Context Information:
 =>URL Information
 =>Header informations
 =>Request information
 =>ServletRequest information
 =>ServletResponse information
 =>ServletConfig,Context,SecurityContext information
			
package com.ibm.rest.api.context;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.UriInfo;

@Path("context")
public class ContextResource {

    @GET
    @Path("/urlinfo")
    public String getUrlInfo(@Context UriInfo uriInfo) {
        System.out.println(uriInfo.getAbsolutePath());
        System.out.println(uriInfo.getBaseUri());
        System.out.println(uriInfo.getPathParameters());
        System.out.println(uriInfo.getRequestUri());
        return "Url Info";
    }

    @GET
    @Path("/headers")
    public String getHeaders(@Context HttpHeaders httpHeaders) {
        return httpHeaders.getRequestHeaders().toString();
    }
}
.....................................................................................
.....................................................................................
				Responses
.....................................................................................

What can be response?

JAX-RS api can return any one of the following type.

1.String - Plain/text
2.Objects/Collections - application/json ,application/xml.
3.void - No return type - only Status.
4.Response - Response Object
5.Reactive Type - Uni or Multi - Non blocking api is enabled.


Alread we have discussed String.

Object As Return Type:

package com.ibm.rest.api.entity;

public class Order {
    private Integer orderId;
    private String orderStatus;
    private Double orderValue;
    private String comments;

    public Order() {
    }

    public Order(Integer orderId, String orderStatus, Double orderValue, String comments) {
        this.orderId = orderId;
        this.orderStatus = orderStatus;
        this.orderValue = orderValue;
        this.comments = comments;
    }

    public Integer getOrderId() {
        return orderId;
    }

    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
    }

    public String getOrderStatus() {
        return orderStatus;
    }

    public void setOrderStatus(String orderStatus) {
        this.orderStatus = orderStatus;
    }

    public Double getOrderValue() {
        return orderValue;
    }

    public void setOrderValue(Double orderValue) {
        this.orderValue = orderValue;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    @Override
    public String toString() {
        return "Order{" +
                "orderId=" + orderId +
                ", orderStatus='" + orderStatus + '\'' +
                ", orderValue=" + orderValue +
                ", comments='" + comments + '\'' +
                '}';
    }
}

package com.ibm.rest.api.responses;

import com.ibm.rest.api.entity.Order;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("orders")
public class OrderResource {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Order getSingleOrder() {
        Order order = new Order(1, "pending", 1000.334, "Contains electronics");
        return order;
    }
}

Testing:
http://localhost:8080/orders

Order{orderId=1, orderStatus='pending', orderValue=1000.334, comments='Contains electronics'}

After accessing the url, quarkus returns object in the form of string representation.
that means object is converted into plain string and returned...

My requirement is "JSON".

By default JSON will not be returned, if you want json you need to install JSON Parser.
.....................................................................................
.....................................................................................
			          Extensions
..................................................................................
What is extension?

 extension is , project dependency- jar dependency.

By default, you can have extensions, when we new project.

Think of Quarkus extensions are as your project dependencies.

Extensions configure,boot and integrate a framework or technology into your quarkus application.

They also do all of the heavy lifting of providing the right information to Graalvm For application to compile nativly.

How do you manage extensions?
  Management means - add,removing,list extensions


There are two extensions?

1.via maven or gradle
2.via cli -quarkus command.

List current extensions in the current project

>quarkus ext ls
Looking for the newly published extensions in registry.quarkus.io
Current Quarkus extensions installed: 

? ArtifactId                                         Extension Name
? quarkus-resteasy-reactive                          RESTEasy Reactive

To get more information, append `--full` to your command line

How to add extension?

>quarkus ext add resteasy-reactive-jackson
[SUCCESS]  Extension io.quarkus:quarkus-resteasy-reactive-jackson has been installed

quarkus ext ls
Current Quarkus extensions installed: 

? ArtifactId                                         Extension Name
? quarkus-resteasy-reactive                          RESTEasy Reactive
? quarkus-resteasy-reactive-jackson                  RESTEasy Reactive Jackson
.....................................................................................
			 Collections
....................................................................................
package com.ibm.rest.api.responses;

import com.ibm.rest.api.entity.Order;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

import java.util.List;

@Path("orders")
public class OrderResource {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/single")
    public Order getSingleOrder() {
        Order order = new Order(1, "pending", 1000.334, "Contains electronics");
        return order;
    }

    //List of Orders
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Order> listOrder() {
        return List.of(
                new Order(1, "pending", 1000.334, "Contains electronics"),
                new Order(2, "delivered", 455434.90, "Contains electronics"),
                new Order(3, "dispatched", 233434.4555, "Contains electronics"),
                new Order(4, "InTransit", 122323.89, "Contains electronics"),
                new Order(5, "pending", 7800.334, "Contains electronics")
        );
    }
}
.....................................................................................				Response Object
.....................................................................................
What is Advantage over Objects when sent response?
  
You can send additional information along with responses , like custom headers,tokens, some resource information...

Response Object:
  Response Object used to send "Payload" along with meta Data(http status code, and other information).
 
HTTP Status codes:

-> informational response - 100 to 199-1X
-> success response -  200-299-2X
-> Redirects  - 300-399 -3X
-> client errors - 400-499 -4X
-> server errrors - 500-599 - 5X

Response class:
 Response is abstract class contains two factory api.

public abstract Object getEntity()
public abstract int getStatus()

Builder Class:

public static ResponseBuilder status(int status)
public static ResponseBuilder ok()
public static ResponseBuilder ok(Object entity)
public static ResponseBuilder created()
public static ResponseBuilder accepted()
public static ResponseBuilder noContent()


Response class has been desinged with "Builder" /Command Chain Pattern
https://docs.jboss.org/resteasy/docs/3.0.9.Final/javadocs/index.html


Eg:
package com.ibm.rest.api.entity;

public class Product {
    private Integer productId;
    private String productName;
    private Double price;

    public Product() {
    }

    public Product(Integer productId, String productName, Double price) {
        this.productId = productId;
        this.productName = productName;
        this.price = price;
    }

    public Integer getProductId() {
        return productId;
    }

    public void setProductId(Integer productId) {
        this.productId = productId;
    }

    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }
}
package com.ibm.rest.api.responses;

import com.ibm.rest.api.entity.Product;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("products")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ProductResource {

    @GET
    public Response getProducts() {
        List<Product> products = List.of(
                new Product(1, "Tooth Paste", 1233.00),
                new Product(2, "Too brush", 123.00),
                new Product(3, "Shaving cream", 500.00),
                new Product(1, "Soap", 340.00)

        );
        return Response.ok().entity(products).status(200).header("company", "ebay")
                .build();
    }
}
...................................................................................
			void

package com.ibm.rest.api.responses;

import com.ibm.rest.api.entity.Product;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("products")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ProductResource {

    @DELETE
    public void remove() {
        System.out.println("remove");
    }
}
....................................................................................
			Reactive Responses 
...................................................................................
As we discussed already, Quarkus supports non blocking io arch. 

Quarkus is running on vertx Engine.

Vertx engine uses non blocking infrastrastructure of the operating system.

Vertx Provides threading model which are two types of threads.

1.Non Blocking threads- Event Loop Threads.
2.Blocking threads or Worker Pool threads


Non Blocking threads or Event Loop Threads are used to multiplex the incoming requests.
Vertx Engine provides per cpu core two threads, if i have 12 core, then i would have 24 threads to handle incoming requests.

Worker pool threads are used to handle "Request Per  Thread model" - One request and one thread.

By default all Rest api runs on "Worker Pool thread".

	
Testing Thread:
..............
package com.ibm.rest.api.responses;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("thread")
public class BlockingThreadResource {

    @GET
    public String runOnWorkerPool() {
        System.out.println(Thread.currentThread().getName());
        return "Hello";
    }
}

After Running
http://localhost:8080/thread

Output:
Thread  : executor-thread-1

Here exector-thread-1 is "Blocking thread" meaning that our code is running request per thread model. 
....................................................................................
     How to run the request handling using Event loop thread(nonBlocking thread)
...................................................................................

if your endpoint method needs to accomplish an async or reactive task before being able to answer to the client, you can declare your method to return "Uni/Multi",
in which case current http request to be turned as non blocking handled by "event loop thread", the current method will not return result immediately rather which suspends current http thread.

package com.ibm.rest.api.responses;

import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("reactive")
public class ReactiveNonBlockingResource {

    //Simple String
    @GET
    @Path("/name")
    public Uni<String> getName() {
        System.out.println("Thread =>  " + Thread.currentThread().getName());
        return Uni.createFrom().item("Hello");
    }
}

After Running:
http://localhost:8080/reactive/name

Thread =>  vert.x-eventloop-thread-1

How to return Object/List via Mutiny?

package com.ibm.rest.api.responses;

import com.ibm.rest.api.entity.Product;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("reactive")
public class ReactiveNonBlockingResource {

    //Simple String
    @GET
    @Path("/name")
    public Uni<String> getName() {
        System.out.println("Thread =>  " + Thread.currentThread().getName());
        return Uni.createFrom().item("Hello");
    }

    @GET
    @Path("/products")
    public Uni<List<Product>> getProducts() {
        System.out.println("getProducts Thread =>  " + Thread.currentThread().getName());
        List<Product> products = List.of(
                new Product(1, "Tooth Paste", 1233.00),
                new Product(2, "Too brush", 123.00),
                new Product(3, "Shaving cream", 500.00),
                new Product(1, "Soap", 340.00)

        );
        return Uni.createFrom().item(products);
    }
}
...........................................................................
                     Response Object with Reactive Type
.............................................................................

Reactive Response Object:
.........................
package com.ibm.rest.api.responses;

import com.ibm.rest.api.entity.Product;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;
import org.jboss.resteasy.reactive.RestResponse;
import org.jboss.resteasy.reactive.RestResponse.ResponseBuilder;

import java.util.List;

@Path("reactive")
public class ReactiveNonBlockingResource {

    //Simple String
    @GET
    @Path("/name")
    public Uni<String> getName() {
        System.out.println("Thread =>  " + Thread.currentThread().getName());
        return Uni.createFrom().item("Hello");
    }

    @GET
    @Path("/products")
    public Uni<List<Product>> getProducts() {
        System.out.println("getProducts Thread =>  " + Thread.currentThread().getName());
        List<Product> products = List.of(
                new Product(1, "Tooth Paste", 1233.00),
                new Product(2, "Too brush", 123.00),
                new Product(3, "Shaving cream", 500.00),
                new Product(1, "Soap", 340.00)

        );
        return Uni.createFrom().item(products);
    }

    @GET
    @Path("/products/response")
    public RestResponse<List<Product>> getProductsResponse() {
        List<Product> products = List.of(
                new Product(1, "Tooth Paste", 1233.00),
                new Product(2, "Too brush", 123.00),
                new Product(3, "Shaving cream", 500.00),
                new Product(1, "Soap", 340.00)

        );
        return ResponseBuilder.ok(products).build();
    }
}
.....................................................................................
		How to get Payload
....................................................................................

package com.ibm.rest.api.request.payload;

import com.ibm.rest.api.entity.Item;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.MediaType;

@Path("item")
@Consumes(MediaType.APPLICATION_JSON)
public class ItemResource {

    @POST
    public Item save(Item item){
        System.out.println(item);
        return item;
    }
}

