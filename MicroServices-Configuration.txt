			  Microservices/Distributed Configuration
.....................................................................................

MicroProfile Config Specification
.....................................................................................
	In Micro service Applications, configurations are always critical. we have to store application configuration information within application or centerialzed way..

In Quarkus Microprofile specification has been integrated with "SmallRye" lib


             QuarkusApp
                 |
      SmallRye Config Implementation
                 |
          MicroProfile config Spec


Core Concepts:

1.Config Sources:
  The place from where the configuration data is presented.


1.(400) System properties 

2.(300) Environment variables

3.(295) .env file in the current working directory

4.(260) Quarkus Application configuration file in $PWD/config/application.properties

5.(250) Quarkus Application configuration file application.properties in classpath

6.(100) MicroProfile Config configuration file META-INF/microprofile-config.properties in classpath

7.Third Party Configuration infrastructure
  consul,kubernetes,zookeeper,git,external webserver etc.....

 A configuration property lookup starts by the "highest ordinal configuration source available and works it way down to other sources until a match is found". 

This means that any configuration property may override a value just by setting a different value in a higher ordinal config source.

 For example, a property configured using an environment property overrides the value provided using the application.properties file.



Use Case : how to read config values from the application.properties

#application
greeting.message=Hello,How are you?

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "message.greeting")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }
}

................................................................................
		What if the config property not present in the configuration file
................................................................................
application.properities

if no property found in any config source, the system will throw exception.

 Suppressed: java.util.NoSuchElementException: SRCFG00014: The config property greeting.message is re
quired but it could not be found in any config source
                at io.smallrye.config.SmallRyeConfig.convertValue(SmallRyeConfig.java:299)
                at io.smallrye.config.inject.ConfigProducerUtil.getValue(ConfigProducerUtil.java:104)       
                at io.quarkus.arc.runtime.ConfigRecorder.validateConfigProperties(ConfigRecorder.java:60) 


Solution :
 Default Property value
package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "message.greeting",defaultValue = "Hello")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }
}
..................................................................................
		  Programmetic way of accesssing configuration Property
....................................................................................

Without Annotation also we can access configuration properties.

ConfigProvider:
  It is class used to read config values.

#application configuration messages

message.greeting = Hello from RESTEasy Reactive
app.user.name = Subramanian

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "message.greeting", defaultValue = "Hello")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }

    @Path("/name")
    @GET
    public String getName() {
        return ConfigProvider.getConfig()
                .getOptionalValue("app.user.name ", String.class).orElse("ram");
    }
}
....................................................................................
....................................................................................
			System Properties
...................................................................................

System Properties are supplied via command line using flag -D.

System Properties are supplied 
 =>During dev mode
 =>During production mode.

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "message.greeting", defaultValue = "Hello")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }

    @Path("/name")
    @GET
    public String getName() {
        return ConfigProvider.getConfig()
                .getOptionalValue("app.user.name ", String.class).orElse("ram");
    }
}

src/resources/application.properties
#application
greeting.message=Hello,How are you?

Now , if you supply greeting.message property via system variables/properties, as per ordinal value system properties always takes highest priorty.so you will get system property value only.


Running in dev Mode:
quarkus dev -Dgreeting.message=Hello,FromSystem
mvnw -Dgreeting.message=Hello,FromSystem compile quarkus:dev


Now out put would be

Hello,FromSystem.

.....................................................................................					Environment Variables
...................................................................................

Reading config data from the "Operating system Env Variables".

How to set env variable?
 You can set env variables temp or permentally.

In windows 
 SET Command
In linux and mac
 export command


Lab:
 open command prompt: windows
E:\session\IBM\2023\Oct\Quarkus\code-with-quarkus-config>SET message.greeting=Hello,Env Variable

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "message.greeting", defaultValue = "Hello")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }

    @Path("/name")
    @GET
    public String getName() {
        return ConfigProvider.getConfig()
                .getOptionalValue("app.user.name ", String.class).orElse("ram");
    }
}


After running , you can notedown env variables having highest ordinal value(300) than application.properties

Testing:
          
http://localhost:8080/hello

Hello,environment variable

.....................................................................................
				.env File
.....................................................................................

Adding env variables via command prompt using set or export or adding into system settings, it is very hard.
Once the application changes operating system, then we need configure the system settings manually.

.env file is bridge between your operating system env variables and application.

What ever we specifiy inside ".env" file , will be added into operating system when your app boots.


code-with-quarkus-config
   |
   .env

.env file must contain variables which must be uppercase.

MESSAGE_GREETING=Hello,From Env File

Testing:
http://localhost:8080/hello
output:
Hello,From Env File.
.....................................................................................
.....................................................................................
			config/application.properties
.....................................................................................

You can store application configuration inside config/application.properties file.
config folder must be present in the root dir of application.

code-with-quarkus-config
     |
     config
       |
       application.properties
          message.greeting=Hello From,config/properties file

When compare to application.properties over config/application.properties takes highest value.

....................................................................................
			 src/main/resources/application.properties
....................................................................................
message.greeting=Hello,How are you?
....................................................................................
....................................................................................
		   META-INF/microprofile-config.properties

It has the lowest ordinal value when compare to other configurations

microprofile-config.properties
     |
 message.greeting=Hello,From Micro Profile Config Properties!

...................................................................................
			   How property searchs begin
...................................................................................


Flow
    message.greeting

   System Properties
	|
        Environment variables
		|
		.env File
		   |
		   config/application.properties
		    |
		    resources/application.properties
			|
			microprofile.properties
			  |
	 @ConfigProperty(name = "greeting.message", defaultValue = "Default Message")
			  |
			   default value to be picked up
.....................................................................................
....................................................................................
			   Advanced Config Sources
....................................................................................

1.YAML
2.Third Party configuration stores
   =>HashiCorp vault
   =>Consul
   =>Spring Cloud


YAML Configuration:
 YAML is very popular format.
 Kubernets/docker relies hevily on the YAML format to write the various resource descriptions.


Enable YAML Configuration:

quarkus ext add config-yaml

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-config-yaml</artifactId>
    </dependency>

Steps:

1.remove application.properites and add application.yaml

application.yml
greeting:
  message: "hello!!"
package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }
}
....................................................................................
			   External Configuration Infrastructures
....................................................................................

As of now we have discussed application configuration within application itself.

In case of microservices , we need to store "centeralized config information" which is used by many microservices- Distributed Configurations

There are many config sources available

1.HashiCorp valut 
2.Consul configurations
3.Spring Cloud
etc...

Steps:
Steps:
1.install consul.
 You can install directly or via docker.

docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501

2.install consul dependency
 quarkus ext add config-consul


3.in order to connect consul server , we need to configure consul host,port...
  application.properties
#Consul server configuration.

#Use the same name as the application Name that was configured when standing up the config server
quarkus.application.name=consul-test

#Enable retrieval of configuration from Consul server -this is off by default
quarkus.consul-config.enabled=true

#There is a Key in Consul's KV Store that Quarkus application will read and try to extract properties from
quarkus.consul-config.properties-value-keys=config/${quarkus.application.name}
 

4.Create Kv Store in the Consul server

Key/Value
 config/consul-test : PropertyName=value


Java Code:
package com.ibm.config.consul;


import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("consul")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message", defaultValue = "Hello from default")
    String message;

    @GET
    public String sayHello() {
        return message;
    }
}
....................................................................................
			 Profiles
....................................................................................
Environment based configuration:

1.Production env
2.development env
3.Testing env
4.Custom env
   -Staging
   -Pipeline.

What if i want to supply the properties based on env.

In Property files

%dev.greeting.message =Hello From dev
%prod.greeting.message=Hello From Production

eg:

%dev.quarkus.http.port=8080
%prod.quarkus.http.port=9090
%dev.greeting.message=Hello from Dev
%prod.greeting.message=Hello from Prod

Property Expression:
dev.host=8080
prod.host=9090

%dev.quarkus.http.port=${dev.host}
%prod.quarkus.http.port=${prod.host}
%dev.greeting.message=Hello from Dev
%prod.greeting.message=Hello from Prod





